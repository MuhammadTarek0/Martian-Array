public static int sameNumberOfFactors(int n1, int n2)
        {
            if (n1 < 0 || n2 < 0)
                return -1;
            if (n1 == n2)
                return 1;
            if (n1 == 0 || n2 == 0)
                return 0;

            int _n1Factors = 0, _n2Factors = 0;

            for (int i = n1; i > 0; i--)
            {
                if (n1 % i == 0)
                    _n1Factors++;
            }
            for (int i = n2; i > 0; i--)
            {
                if (n2 % i == 0)
                    _n2Factors++;
            }

            if (_n1Factors == _n2Factors)
                return 1;

            return 0;

        }
        
        /// <summary>
        /// Define an array to be a Martian array if 
        /// the number of 1s is greater than the 
        /// number of 2s and no two adjacent elements are equal. 
        /// Write a function named isMartian that returns 1 if its 
        /// argument is a Martian array; otherwise it returns 0.
        /// There are two additional requirements.
        /// 1. You should return 0 as soon as it is 
        /// known that the array is not a Martian array; 
        /// continuing to analyze the array would be a waste of CPU cycles.
        /// 2. There should be exactly one loop in your solution.
        /// Hint: Make sure that your solution does not exceed the boundaries of the array!
        /// </summary>
        /// <param name="a"></param>
        /// <returns></returns>
        public static int isMartian(int[] a)
        {
            int _arrayLength = a.Length,
                _previousElement = 0,
                _onesSum = 0,
                _twosSum = 0;

            if (_arrayLength == 0)
                return 0;
            else if (_arrayLength == 1)
            {
                if (a[0] == 1)
                    return 1;
                else
                    return 0;
            }
            else
            {
                for (int i = 0; i < _arrayLength; i++)
                {
                    if (i > 0 && a[i] == _previousElement)
                        return 0;

                    else if (a[i] == 1)
                    {
                        _onesSum++;
                        _previousElement = 0;
                    }
                    else if (a[i] == 2)
                    {
                        _twosSum++;
                        _previousElement = 0;
                    }
                    else
                        _previousElement = a[i];
                }
            }

            if (_onesSum > _twosSum)
                return 1;
            
                return 0;

        }
        
        ///<summary>
        ///An Olympic array is defined to be an array in which every value 
        ///is greater than or equal to the sum of the values less than it. 
        ///The sum of the values less than the minimum value in the array is defined to be 0.
        ///</summary>
        /// <param name="a"></param>
        /// <returns></returns>
        public static int isOlympic(int[] a)
        {
            int _arrayLength = a.Length;

            for (int d1 = 0; d1 < _arrayLength; d1++)
            {
                int _sum = 0;

                for (int d2 = 0; d2 < _arrayLength; d2++)
                {
                    if (a[d2] < a[d1])
                        _sum += a[d2];
                }

                if (a[d1] < _sum)
                    return 0;
            }

            return 1;
        }
